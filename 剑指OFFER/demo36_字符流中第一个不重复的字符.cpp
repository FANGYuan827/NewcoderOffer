/*
2018年2月28日14:35:37
请实现一个函数用来找出字符流中第一个只出现一次的字符。
例如，当从字符流中只读出前两个字符"go"时，第一个只出现一次的字符是"g"。
当从该字符流中读出前六个字符“google"时，第一个只出现一次的字符是"l"。

输出描述:
如果当前字符流没有存在出现一次的字符，返回#字符。
*/

#include "iostream"
#include "vector"			//包含容器
#include <string>
using namespace std;


class Solution_1{	
public:
  //Insert one char from stringstream
    void Insert(char ch)
    {
		s.push_back(ch);       //字符的顺序被保存到了s中
		hash[ch]++;
    }
  //return the first appearence once char in current stringstream
    char FirstAppearingOnce()
    {
		int size = s.size();
		for(int i=0;i<size;i++)
		{
			if(hash[s[i]] == 1)
				return s[i];
		}
		return '#'; 
    }
	Solution_1()
	{
		memset(hash,0,256*sizeof(char));
	}
private:
	vector<char> s;
	char hash[256];
};


//main函数就是业务函数的测试函数
void main_demo36()
{
	Solution_1 s1;
	char *string_point = "googlel";
	int length = sizeof("googlel");
	//cout<<string_point<<endl;
	
	for(int i = 0;i<length-1;i++)       //循环读入单个字符
	{
		s1.Insert(*(string_point+i));
	}
	//cout<<*(string_point)<<endl;
	char res = s1.FirstAppearingOnce();
	cout<<"字符流中只出现一次的字符为："<<res<<endl;
	system("pause");
}